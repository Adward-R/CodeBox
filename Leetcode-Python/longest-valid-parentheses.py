__author__ = 'Adward'
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        validParas = []
        stk = []
        for ch in s:
            if ch == '(':
                stk.append(-1)
            elif len(stk):
                if stk[-1] > 0:
                    if len(stk) <= 1:
                        validParas.append(stk[-1])
                        stk.pop()
                    else:
                        theTop = stk[-1]
                        stk.pop()
                        stk[-1] = theTop + 2
                        theTop = stk[-1]
                        while len(stk) > 1 and stk[-2] > 0:
                            stk.pop()
                            stk[-1] += theTop
                            theTop = stk[-1]

                else: # '(' at top
                    if len(stk) > 1 and stk[-2] > 0:
                        theTop = 2
                        while len(stk) > 1 and stk[-2] > 0:
                            stk.pop()
                            stk[-1] += theTop
                            theTop = stk[-1]
                    else:
                        stk[-1] = 2

        stk += validParas
        try:
            return max(max(stk), 0)
        except:
            return 0

sol = Solution()
paras = '()(()()())'
paras = "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("
print(sol.longestValidParentheses(paras))